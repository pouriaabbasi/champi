// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using champi.Context;

namespace champi.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20190402080959_users")]
    partial class users
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("champi.Domain.Entity.Competition.Competition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChampionTeamId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<long>("GameTypeId");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsStarted");

                    b.Property<int>("Iteration");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TeamCount");

                    b.HasKey("Id");

                    b.HasIndex("ChampionTeamId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("Competition","Competition");
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.CompetitionStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompetitionId");

                    b.Property<int>("CompetitionType");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsStarted");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("Step");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("CompetitionStep","Competition");
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.CompetitionTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompetitionId");

                    b.Property<long>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("TeamId");

                    b.ToTable("CompetitionTeam","Competition");
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.GameType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<long?>("ParentGameTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ParentGameTypeId");

                    b.ToTable("GameType","Competition");
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.League", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompetitionStepId");

                    b.Property<int>("DrawPoint");

                    b.Property<int>("FallTeamCount");

                    b.Property<bool>("IsHomeAway");

                    b.Property<int>("LostPoint");

                    b.Property<int>("PeerToPeerPlayCount");

                    b.Property<int>("RiseTeamCount");

                    b.Property<int>("TeamCount");

                    b.Property<int>("WonPoint");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionStepId");

                    b.ToTable("League","Competition");
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.LeagueMatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FirstTeamId");

                    b.Property<int?>("FirstTeamScore");

                    b.Property<long>("LeagueId");

                    b.Property<DateTime?>("MatchDate");

                    b.Property<long>("SecondTeamId");

                    b.Property<int?>("SecondTeamScore");

                    b.Property<long?>("WinnerTeamId");

                    b.HasKey("Id");

                    b.HasIndex("FirstTeamId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SecondTeamId");

                    b.HasIndex("WinnerTeamId");

                    b.ToTable("LeagueMatch","Competition");
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.LeagueResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Draw");

                    b.Property<int>("GoalDifference");

                    b.Property<int>("GoalsAgainst");

                    b.Property<int>("GoalsFor");

                    b.Property<long>("LeagueId");

                    b.Property<int>("LeagueResultType");

                    b.Property<long>("LeagueTeamId");

                    b.Property<int>("Lost");

                    b.Property<int>("Played");

                    b.Property<int>("Points");

                    b.Property<int>("PreviousPosition");

                    b.Property<int>("Rank");

                    b.Property<int>("Won");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("LeagueTeamId");

                    b.ToTable("LeagueResult","Competition");
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.LeagueTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompetitionTeamId");

                    b.Property<long>("LeagueId");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionTeamId");

                    b.HasIndex("LeagueId");

                    b.ToTable("LeagueTeam","Competition");
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbbreviationName")
                        .HasMaxLength(10);

                    b.Property<string>("Logo")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Team","Competition");
                });

            modelBuilder.Entity("champi.Domain.Entity.Security.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User","Security");
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.Competition", b =>
                {
                    b.HasOne("champi.Domain.Entity.Competition.Team", "ChampionTeam")
                        .WithMany("ChampionCompetitions")
                        .HasForeignKey("ChampionTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("champi.Domain.Entity.Competition.GameType", "GameType")
                        .WithMany("Competitions")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.CompetitionStep", b =>
                {
                    b.HasOne("champi.Domain.Entity.Competition.Competition", "Competition")
                        .WithMany("CompetitionSteps")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.CompetitionTeam", b =>
                {
                    b.HasOne("champi.Domain.Entity.Competition.Competition", "Competition")
                        .WithMany("CompetitionTeams")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("champi.Domain.Entity.Competition.Team", "Team")
                        .WithMany("CompetitionTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.GameType", b =>
                {
                    b.HasOne("champi.Domain.Entity.Competition.GameType", "ParentGameType")
                        .WithMany("ChildGameTypes")
                        .HasForeignKey("ParentGameTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.League", b =>
                {
                    b.HasOne("champi.Domain.Entity.Competition.CompetitionStep", "CompetitionStep")
                        .WithMany("Leagues")
                        .HasForeignKey("CompetitionStepId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.LeagueMatch", b =>
                {
                    b.HasOne("champi.Domain.Entity.Competition.LeagueTeam", "FirstTeam")
                        .WithMany("LeagueMatchesFirstTeam")
                        .HasForeignKey("FirstTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("champi.Domain.Entity.Competition.League", "League")
                        .WithMany("LeagueMatches")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("champi.Domain.Entity.Competition.LeagueTeam", "SecondTeam")
                        .WithMany("LeagueMatchesSecondTeam")
                        .HasForeignKey("SecondTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("champi.Domain.Entity.Competition.LeagueTeam", "WinnerTeam")
                        .WithMany("LeagueMatchesWinnerTeam")
                        .HasForeignKey("WinnerTeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.LeagueResult", b =>
                {
                    b.HasOne("champi.Domain.Entity.Competition.League", "League")
                        .WithMany("LeagueResults")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("champi.Domain.Entity.Competition.LeagueTeam", "LeagueTeam")
                        .WithMany("LeagueResults")
                        .HasForeignKey("LeagueTeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("champi.Domain.Entity.Competition.LeagueTeam", b =>
                {
                    b.HasOne("champi.Domain.Entity.Competition.CompetitionTeam", "CompetitionTeam")
                        .WithMany("LeagueTeams")
                        .HasForeignKey("CompetitionTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("champi.Domain.Entity.Competition.League", "League")
                        .WithMany("LeagueTeams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
